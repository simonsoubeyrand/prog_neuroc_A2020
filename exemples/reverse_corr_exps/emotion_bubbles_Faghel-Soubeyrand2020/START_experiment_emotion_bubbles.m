function bubblesEstimate = START_experiment_emotion_bubbles(name, block,start_bubbles,keys)%% PyramidBubbles face emotion discrimination experiment. % Four basic facial-expression of 'joy', 'fear', 'anger' and  'neutrality'% are shown while participants are asked to categorise the partially% sampled face images.% % HOW TO START THE EXPERIMENT : % % START_experiment_emotion_bubbles('name', 1,40,1)%% name : a string (e.g. 'Denis')% block : an interger( e.g. 1)% start bubbles : an interger (should start at 100 for 1st block)% keys : 1-2-3-4 (key conditions; put this at 1).%% This experimental code was used in Faghel-Soubeyrand, S. et al. (2020)% Abnormal visual representations associated with confusion of perceived % facial expression in schizophrenia with social anxiety disorder. % npj Schizophr 6, 28 (2020). https://doi.org/10.1038/s41537-020-00116-1% % article link : https://www.nature.com/articles/s41537-020-00116-1%%% START_experiment_emotion_bubbles('name', 1,40,1)%% author : Simon Faghel-Soubeyrand (Universite de Montreal, 2017) % tested by : Frédéric Gosselin (2017) home_dir=cd;instructions_dir=fullfile(home_dir,sprintf('/instructions/Instructions_bubblesEmo_%d',keys));stimuli_dir=fullfile(home_dir,sprintf('/stimuli/'));results_dir=fullfile(home_dir,sprintf('/results/'));XpInstruction(instructions_dir,'m',name)% add path to pyramidtoolbox functions (needed for bubbbles)addpath(fullfile(home_dir,'/matlabPyrTools')) switch keys % Keys For Happy, fearful, Angry and Neutral Faces respectively    case 1        respspec = 'asdf';        emotion(1)='a';        emotion(2)='s';        emotion(3)='d';        emotion(4)='f';                    case 2        respspec = 'fdsa';                emotion(1)='f';        emotion(2)='d';        emotion(3)='s';        emotion(4)='a';                    case 3        respspec = 'sadf';                emotion(1)='s';        emotion(2)='a';        emotion(3)='d';        emotion(4)='f';                    case 4        respspec = 'asfd';                emotion(1)='a';        emotion(2)='s';        emotion(3)='f';        emotion(4)='d';                end        % Here we present faces with either 4 emotions : 'anger', 'happy', 'fear' or  'neutral' emotion discriminationload(fullfile(stimuli_dir,'imEmotions_bub.mat'),'imEmotions');temp = imEmotions{1}; % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %% 1. Makes a PCID file% % % % % % % % % % % % % % % % % % % % % % % % % % % % % %rand('state', sum(100*clock)); % initialize the pseudo-random number generatorfileName = sprintf('roy2_%s_%d.pcid', name, block);info = 'Bubbles experiment, UdeM, 2017.';noise = 'noisePyramid.m';s1 = sprintf('glopar{1} = [%d %d]; ', size(temp)); % size of the stimulis2 = 'glopar{2} = 3; '; % nb of cycles per bubbleconstants = [s1 s2];dataLabels = 'the_seed nbBubbles1 nbBubbles2 nbBubbles3 nbBubbles4 nbBubbles5 image_number emotion flip_or_not response RT accuracy'; exitKey = 'ESCAPE';   % 1.1 Creates a data matrixnTrials=100;nbColumns = 12; data = zeros(nbColumns, nTrials);data(7,:) = ceil(40*rand(1,nTrials));%repmat([1:nbFaces], 1, nbRepeat); % image number GOTTA MATCH DATA(8,:)data(8,:) =ceil(data(7,:)/10); % % emotions  repmat(mod(data(7,:)-1,4)+1, 1, nbRepeat); % emotions% data = data(:, randperm(nbData)); % jumble everythingdata(1,:) = -99; data(1,1) = round(sum(100*clock)); % the seeddata(9,:) = round(rand(1,nTrials)); % image flipped or not % 1.2 Saves everything in a CID filemakeCid(fileName, info, noise, constants, dataLabels, data) % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %% 2- Runs the experiment guided by a PCID% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % rand('state', sum(100*clock));cid = readCid2(fileName);eval(cid.constants)nbScales = 5;probBubbles = 4.^[nbScales-1:-1:0] / sum(4.^[nbScales-1:-1:0]);maxBubbles = 200; target = .75;q = initQuest(start_bubbles / maxBubbles, target); Screen('Preference', 'SkipSyncTests', 1); % uncomment if necessary% Psychophysics initsAssertOpenGL;screens=Screen('Screens');screenNumber=max(screens);[w, wRect]=Screen('OpenWindow',screenNumber, 128,[],32,2);%  Center coordinates[xCenter,yCenter]   = RectCenter(wRect);Screen('TextSize', w, 55);Screen(w,'TextFont', 'Helvetica');sourceRect = [0 0 255 255];destinationRect=[xCenter-128, yCenter-128,xCenter+128, yCenter+128];HideCursor; for trial = 1:nTrials,    nbBubbles = round(maxBubbles * QuestMean(q));    temp1 = rand(nbBubbles, nbScales);    temp2 = repmat(probBubbles, nbBubbles, 1);    cid.data(2:6,trial) = sum(le(temp1, temp2), 1);    anImage = imEmotions{cid.data(7, trial)};    if cid.data(9, trial)        anImage = fliplr(anImage);    end    aStimulus = noisePyramid(cid.data(:, trial), anImage);    aTexture = Screen('MakeTexture', w, uint8(aStimulus));         WaitSecs(0.75);        FlushEvents('keyDown');    startSecs = GetSecs;        while 1,        Screen('DrawTexture', w, aTexture, sourceRect, destinationRect);        Screen('Flip',w);        [keyIsDown, endSecs, keyCode] = KbCheck;        if keyIsDown            response = KbName(keyCode);            if ~isempty(findstr(response, respspec))                break;            elseif strcmp(KbName(keyCode),exitKey);                sca;                ShowCursor;                ListenChar(1);                error('Quit key was pressed.');                            end        end    end    Screen(w,'FillRect', 128);    Screen('Flip', w);    rt = endSecs - startSecs;        cid.data(10, trial) = response; % RESPONSE[response, rt];    cid.data(11, trial)= rt;            correct = (response == emotion(cid.data(8, trial)));    cid.data(12,trial)=correct;    q = QuestUpdate(q, QuestMean(q), correct); endsca;ShowCursor;fileName = fullfile(results_dir,sprintf('Simon_EmoPyramid_%s_%d.mat', name, block));save(fileName, 'cid');  % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %% 3- Descriptive stats% % % % % % % % % % % % % % % % % % % % % % % % % % % % % %kernel = nTrials; figure, plot(sum(cid.data(2:6,:))),title(sprintf('Accuracy : %.2f',mean(cid.data(12,:))))mean(sum(cid.data(2:6,:)))bubblesEstimate = bubblesEvolutionRoy2(cid, kernel); 